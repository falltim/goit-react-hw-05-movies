{"version":3,"file":"static/js/37.1144db7e.chunk.js","mappings":"gPAKe,SAASA,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACIC,EAAQ,GACRC,EAAcH,EAAaI,IAAI,SAC7BC,GAAcC,EAAAA,EAAAA,UAAS,CAAC,UAAWH,IAAc,kBACrDI,EAAAA,EAAAA,IAAYJ,MAed,GAA2B,YAAvBE,EAAYG,OAKd,OAJIL,IACFD,EAAQG,EAAYI,KAAKC,UAIzB,iCACE,kBACEC,MAAO,CAAEC,OAAQ,IACjBC,UAAU,cACVC,SAtBa,SAAAC,GACnBA,EAAEC,iBACF,IAAMb,EAAcN,EAAMoB,OAAOC,cACb,KAAhBf,EAIJF,EAAgB,CAAEJ,MAAOM,IAHvBgB,MAAM,UAeJ,WAKE,kBACEC,KAAK,OACLC,KAAK,OACLC,KAAK,KACLC,aAAa,MACbC,SApBW,SAAAT,GACnBjB,EAASiB,EAAEU,cAAcC,WAqBnB,mBAAQf,MAAO,CAAEC,OAAQ,GAAIe,OAAQ,WAAaP,KAAK,SAAvD,uBAIDlB,IACC,wBACGA,EAAM0B,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAP,OACT,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAb,SAAoBC,KADbD,a,0MClDvBG,IAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAM,mCAEL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6FACCC,EAAS,CACbC,QAASH,GAFN,kBAKoBD,GAAAA,CAAM,qBAAsB,CAAEG,OAAAA,IALlD,cAKGE,EALH,yBAMIA,EAAS5B,MANb,gCAQH6B,QAAQC,MAAR,MARG,gFAYA,SAAehC,IAAtB,4CAAO,OAAP,oBAAO,uGAA2BJ,EAA3B,+BAAyC,GAAzC,wDAICgC,EAAS,CACbC,QAASH,EACTpC,MAAOM,GANJ,kBASoB6B,GAAAA,CAAM,eAAgB,CAAEG,OAAAA,IAT5C,cASGE,EATH,yBAUIA,EAAS5B,MAVb,kCAYH6B,QAAQC,MAAR,MAZG,kFAgBA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,2GAAyBX,EAAzB,+BAA8B,GAC7BM,EAAS,CACbC,QAASH,GAFN,kBAKoBD,GAAAA,CAAM,SAAD,OAAUH,GAAM,CAAEM,OAAAA,IAL3C,cAKGE,EALH,yBAMIA,EAAS5B,MANb,gCAQH6B,QAAQC,MAAR,MARG,iFAYA,SAAeE,IAAtB,4CAAO,OAAP,oBAAO,2GAA4BZ,EAA5B,+BAAiC,GAChCM,EAAS,CACbC,QAASH,GAFN,kBAKoBD,GAAAA,CAAM,SAAD,OAAUH,EAAV,YAAwB,CAAEM,OAAAA,IALnD,cAKGE,EALH,yBAOIA,EAAS5B,MAPb,gCASH6B,QAAQC,MAAR,MATG,iFAaA,SAAeG,IAAtB,4CAAO,OAAP,oBAAO,2GAA4Bb,EAA5B,+BAAiC,GAChCM,EAAS,CACbC,QAASH,GAFN,kBAKoBD,GAAAA,CAAM,SAAD,OAAUH,EAAV,YAAwB,CAAEM,OAAAA,IALnD,cAKGE,EALH,yBAMIA,EAAS5B,MANb,gCAQH6B,QAAQC,MAAR,MARG","sources":["components/MoviesPage/MoviesPage.js","services/films-api.js"],"sourcesContent":["import { useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { useSearchParams, Link } from 'react-router-dom';\nimport { searchMovie } from '../../services/films-api';\n\nexport default function MoviesPage() {\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  let films = [];\n  let searchQuery = searchParams.get('query');\n  const queryToFind = useQuery(['moviesF', searchQuery], () =>\n    searchMovie(searchQuery)\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const searchQuery = query.trim().toLowerCase();\n    if (searchQuery === '') {\n      alert('Empty');\n      return;\n    }\n    setSearchParams({ query: searchQuery });\n  };\n  const handleChange = e => {\n    setQuery(e.currentTarget.value);\n  };\n  if (queryToFind.status === 'success') {\n    if (searchQuery) {\n      films = queryToFind.data.results;\n    }\n\n    return (\n      <>\n        <form\n          style={{ margin: 20 }}\n          className=\"search-form\"\n          onSubmit={handleSubmit}\n        >\n          <input\n            type=\"text\"\n            name=\"find\"\n            size=\"20\"\n            autoComplete=\"off\"\n            onChange={handleChange}\n          ></input>\n          <button style={{ margin: 10, cursor: 'pointer' }} type=\"submit\">\n            Search\n          </button>\n        </form>\n        {films && (\n          <ul>\n            {films.map(({ id, original_title }) => (\n              <li key={id}>\n                <Link to={`${id}`}>{original_title}</Link>\n              </li>\n            ))}\n          </ul>\n        )}\n      </>\n    );\n  }\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst KEY = '067f291d21ed1c6d30bd9ade17d843cc';\n\nexport async function trendMovies() {\n  const params = {\n    api_key: KEY,\n  };\n  try {\n    const response = await axios('trending/movie/day', { params });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function searchMovie(searchQuery = '') {\n  if (!searchQuery) {\n    return;\n  }\n  const params = {\n    api_key: KEY,\n    query: searchQuery,\n  };\n  try {\n    const response = await axios('search/movie', { params });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function movieById(id = '') {\n  const params = {\n    api_key: KEY,\n  };\n  try {\n    const response = await axios(`movie/${id}`, { params });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function movieCredits(id = '') {\n  const params = {\n    api_key: KEY,\n  };\n  try {\n    const response = await axios(`movie/${id}/credits`, { params });\n\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function movieReviews(id = '') {\n  const params = {\n    api_key: KEY,\n  };\n  try {\n    const response = await axios(`movie/${id}/reviews`, { params });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"names":["MoviesPage","useState","query","setQuery","useSearchParams","searchParams","setSearchParams","films","searchQuery","get","queryToFind","useQuery","searchMovie","status","data","results","style","margin","className","onSubmit","e","preventDefault","trim","toLowerCase","alert","type","name","size","autoComplete","onChange","currentTarget","value","cursor","map","id","original_title","to","axios","KEY","trendMovies","params","api_key","response","console","error","movieById","movieCredits","movieReviews"],"sourceRoot":""}